import sqlite3
import datetime

conn = sqlite3.connect("cinema_db.sqlite3")
cursor = conn.cursor()

# Создание таблицы "КИНОТЕАТРЫ"
cursor.execute("""CREATE TABLE cinema (
                    id integer, 
                    title text, 
                    address text, 
                    phone text, 
                    url1 text, 
                    url2 text
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
cinema = [(1, 'Magic Cinema (Мытищи)', 'г. Мытищи, посёлок Птицефабрики, Дмитровское ш., с4, ТЦ «5 Планет»', '+7 (498) 680-55-65', 'magicinema.com', ''),
          (2, 'Foster Cinema', 'Фрунзенская наб., 30, стр. 19', '+7 (903) 799-59-92', 'foster-cinema.ru', ''),
          (3, 'Mori Cinema (Красногорск)', 'г. Красногорск, ул. Знаменская, 5, ТРЦ «Июнь», 4 этаж', '', 'www.mori-cinema.ru', 'vk.com/moricinema.official'),
          (4, 'Prada 3D (Балашиха)', 'г. Балашиха, просп. Ленина, 25', '+7 (926) 624-64-42', 'balashiha.prada3d.ru', 'vk.com/pradabalashiha')]

cursor.executemany("INSERT INTO cinema VALUES (?,?,?,?,?,?)", cinema)
conn.commit()

# Создание таблицы "ЗАЛ"
cursor.execute("""CREATE TABLE room (
                    id integer, 
                    cinema_id integer, 
                    name text, 
                    rows integer, 
                    cols integer
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
room = [(1, 1, 'Зал №1', 5, 10),
        (2, 1, 'Зал №2', 12, 20),
        (3, 2, 'Зеленый зал', 6, 12),
        (4, 2, 'Красный зал', 6, 12),
        (5, 3, 'Основной зал', 12, 20),
        (6, 4, 'Основной зал', 15, 25)
       ]

cursor.executemany("INSERT INTO room VALUES (?,?,?,?,?)", room)
conn.commit()

# Создание таблицы "GENRE"
cursor.execute("""CREATE TABLE genre (
                    id integer,
                    title text, 
                    name text
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
genre = [(1, 'Боевик', 'boyevik'),
          (2, 'Детектив', 'detective'),
          (3, 'Драма', 'drama'),
          (4, 'Комедия', 'comedy'),
          (5, 'Мелодрама', 'romance'),
          (6, 'Приключения', 'priklyucheniya'),
          (7, 'Трагикомедия', 'tragicomedy'),
          (8, 'Триллер', 'triler'),
          (9, 'Ужасы', 'zhakhi'),
          (10, 'Фантастика', 'fantastika'),
          (11, 'Мультфильм', 'cartoon'),
          (12, 'Спортивный', 'sport-movie'),
          (13, 'Документаьный', 'dokumentalniy'),
          (14, 'Семейное кино', 'family_movie'),
          (15, 'Сборник короткометражек', 'short-films'),
          (16, 'Детям', 'kids')]

cursor.executemany("INSERT INTO genre VALUES (?,?,?)", genre)
conn.commit()

# Создание таблицы "FILM"
cursor.execute("""CREATE TABLE film (
                    id integer,
                    title text,
                    original text, 
                    genre_id integer,
                    annotation text,
                    description text,
                    premiere text,
                    producer text,
                    duration integer,
                    country text,
                    release text,
                    rating text,
                    poster text
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
film = [(1, 'Дюна',
            'Dune: Part One',
            10,
            'Тимоти Шаламе в фантастическом эпосе Дени Вильнёва про путешествие на планету Арракис',
            'Наследник знаменитого дома Атрейдесов Пол отправляется вместе с семьёй на одну из самых опасных планет во Вселенной - Арракис. Здесь нет ничего, кроме песка, палящего солнца, гигантских чудовищ и основной причины межгалактических конфликтов - невероятно ценного ресурса, который называется меланж. В результате захвата власти Пол вынужден бежать и скрываться, и это становится началом его эпического путешествия. Враждебный мир Арракиса приготовил для него множество тяжёлых испытаний, но только тот, кто готов взглянуть в...',
            '16 сентября 2021',
            'Дени Вильнёв',
            155,
            'США, Канада, Венгрия',
            '2021',
            '7.5',
            'duna.png'
         ),
        (2, 'Неисправимый Рон',
            'Ron\'s Gone Wrong',
            11,
            'Мальчик получает в подарок сломанного робота, и тот становится его другом',
            'У любого ребёнка должен быть друг. Настоящий, а не какой-то там домашний питомец. Таким лучшим другом может стать прекрасный робот, умеющий двигаться, говорить, но главное - подключённый к Интернету и помогающий своему хозяину делать публикации в соцсетях и узнавать о всех последних тенденциях, поддерживать связь с одноклассниками и быть в курсе событий. Такие есть у всех школьников, кроме стеснительного Барни, который из-за этого чувствует себя чужим среди своих сверстников - до тех пор, пока не получает на день...',
            '21 октября 2021',
            'Сара Смит, Жан-Филипп Вине, Стив Карр, Октавио Е. Родригес',
            106,
            'США, Великобритания, Канада',
            '2021',
            '7.8',
            'rons_gone_wrong.png'
         ),
        (3, 'Исчезнувший',
            'My Son',
            8,
            'Джеймс МакЭвой ищет пропавшего семилетнего сына',
            'Во время очередной командировки Эдмонд узнаёт, что в детском лагере пропал его семилетний сын. Версий у следствия много, но зацепок нет совсем. Когда детектива, который связывает исчезновение ребёнка с профессиональной деятельностью Эдмонда, отстраняют от дела, отец сам пускается на поиски.',
            '14 октября 2021',
            'Кристиан Карион',
            95,
            'Великобритания, Франция',
            '2021',
            '5.6',
            'my_son.png'
         ),
        (4, 'Семейка Аддамс: Горящий тур',
            'The Addams Family 2',
            11,
            'Гомес и Мортиша с детишками и дядей Фестером отправляются в отпуск на катафалке',
            'Что делать, если в доме поселилось настоящее исчадие ада, а именно два подростка? Срочно планировать самый жуткий отпуск! Мартиша, Гомес, Уэнсдей, Пагсли и дядя Фестер загружаются в семейный походный катафалк, чтобы отправиться навстречу новым приключениям и чудаковатым друзьям, от которых волосы встанут дыбом. В этой поездке семейка Аддамс сплотится намертво! Если, конечно, останутся выжившие…',
            '14 октября 2021',
            'Грег Тирнан, Кевин Павлович, Конрад Вернон, Лаура Бруссо',
            93,
            'Великобритания, Канада, США',
            '2021',
            '5.6',
            'addams.png'
         ),
        (5, 'Эйфель',
            'Eiffel',
            3,
            'Байопик про создателя главного архитектурного символа Парижа',
            'Париж, конец XIX века. Талантливый инженер Гюстав Эйфель мечтает строить метро, подземную железную дорогу будущего. Однако встреча с таинственной женщиной из его прошлого буквально переворачивает мир Эйфеля. Их головокружительный роман вдохновляет его на создание немыслимого архитектурного шедевра — гигантской ажурной башни, ставшей в итоге символом Парижа, романтики и любви.',
            '14 октября 2021',
            'Мартин Бурбулон',
            108,
            'Франция, Германия',
            '2021',
            '6.6',
            'eiffel.png'
         )
        ]

cursor.executemany("INSERT INTO film VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", film)
conn.commit()

# Создание таблицы "СЕАНС"
cursor.execute("""CREATE TABLE session (
                    id integer, 
                    room_id integer, 
                    film_id integer,
                    date text,
                    time text,
                    price text
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
today = datetime.date.today().strftime("%d.%m.%Y")
tomorrow = (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")
after_tomorrow = (datetime.date.today() + datetime.timedelta(days=2)).strftime("%d.%m.%Y")
session = [(1, 1, 1, today, '10:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (2, 1, 1, today, '12:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (3, 3, 1, today, '11:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (4, 4, 2, today, '11:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (5, 5, 3, today, '11:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (6, 5, 3, today, '12:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (7, 2, 4, today, '13:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (8, 4, 5, today, '10:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (9, 1, 2, today, '14:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (10, 1, 3, today, '14:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (11, 1, 4, today, '18:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (12, 1, 5, today, '21:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (13, 2, 3, today, '10:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (14, 2, 4, today, '10:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (15, 2, 5, today, '16:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (16, 3, 3, today, '15:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (17, 3, 4, today, '19:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (18, 3, 5, today, '20:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (19, 4, 3, today, '11:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (20, 4, 4, today, '17:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (21, 4, 5, today, '22:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (22, 5, 3, today, '14:30', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (23, 5, 4, today, '18:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (24, 5, 5, today, '21:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (25, 6, 1, today, '10:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (26, 6, 2, today, '12:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (27, 6, 3, today, '14:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (28, 6, 4, today, '16:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           (29, 6, 5, today, '18:00', '{"0:0": 100, "5:0": 200, "4:5": 300, "4:6": 300}'),
           ]

cursor.executemany("INSERT INTO session VALUES (?,?,?,?,?,?)", session)
conn.commit()

# Создаем таблицу билета
cursor.execute("""CREATE TABLE ticket (
                    id integer, 
                    session_id integer, 
                    row integer,
                    col integer,
                    order_name integer,
                    price text
                )
               """)

# Вставляем множество данных в таблицу используя безопасный метод "?"
ticket = [(1, 3, 5, 5, 1, '300.0'),
          (2, 3, 5, 6, 1, '300.0'),
          (3, 3, 5, 7, 1, '300.0'),
          (4, 2, 1, 1, 2, '100.0')
          ]

cursor.executemany("INSERT INTO ticket VALUES (?,?,?,?,?,?)", ticket)
conn.commit()
